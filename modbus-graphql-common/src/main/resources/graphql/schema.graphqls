#
# Modbus Schema Toolkit
# Copyright (C) 2019-2025 Niels Basjes
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
scalar DateTime

# ------------------------------------------

type Query {
  "Get the device data from the device where a maximum age of the values of maxAgeMs milliseconds is allowed to optimize the queries."
  deviceData(
    "The maximum age (in milliseconds) between the moment the query starts and the timestamp of the oldest underlying register value that is used by the requested Fields. This is used to optimize the query. Default is 500 ms."
    maxAgeMs:Int! = 500,
  ): DeviceData!
}

# ------------------------------------------

type Subscription {
  "Continuously get the device data from the device. A set is returned once every intervalMs milliseconds where a maximum age of the values of maxAgeMs milliseconds is allowed to optimize the queries."
  deviceData(
    "The interval (in milliseconds) which indicates the rate how fast the data must be retrieved. If the device is slower than this rate then the actual rate will follow te device. Default is 1000 ms."
    intervalMs:Int! = 1000,
    "The maximum age (in milliseconds) between the moment the query starts and the timestamp of the oldest underlying register value that is used by the requested Fields. This is used to optimize the query. Default is 500 ms."
    maxAgeMs:Int! = 500,
    "Setting this to true will cause the query to start at a round interval timestamp (not perfect, as best as possible). This is when is starts, when the query is complete depends mostly on the Modbus device."
    queryAtRoundInterval:Boolean! = True,
  ): DeviceData!
}

# ------------------------------------------

"All the blocks with logical values defined in the Modbus Schema for the device."
type DeviceData {
  "The description of the used Modbus Schema"
  description: String!

  "The timestamp of when the answer record was constructed by the GraphQL service"
  requestTimestamp: DateTime!

  "The timestamp of the most recent register used to construct the answer"
  dataTimestamp: DateTime

  "The underlying information of the actually performed retrievals from the Modbus device"
  modbusQueries: [ModbusQuery!]!

  "The total number of milliseconds spent in getting the data (includes fetch optimizer)."
  totalUpdateDurationMs: Int!
}

# ------------------------------------------

type ModbusQuery {
  "The first Modbus Address that was requested."
  start: String!

  "The total number of registers that were requested."
  count: Int!

  "The total time it took (in milliseconds) to perform the Modbus retrieval. NULL if not fetched yet."
  duration: Int

  "The status of the retrieval."
  status: ModbusQueryStatus!

  "The fields that were requested that directly (!!) use the mentioned registers as input. This will in many cases also update the values of intermediate registers which are not listed here. Notation: \"BlockId|FieldId\""
  fields: [String!]!
}

enum ModbusQueryStatus {
  NOT_FETCHED
  ERROR
  SUCCESS
}

# ------------------------------------------
